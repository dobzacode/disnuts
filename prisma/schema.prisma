generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt DateTime  @default(now())
  accounts      Account[] 
  sessions      Session[]
  communities  CommunityUser[]
  posts        Post[]
  comments     Comment[]
  votes        Vote[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Visiblity {
  PUBLIC
  RESTRICTED
  PRIVATE
}

model Community {
  community_id   String       @id @default(uuid())
  name            String @unique
  description    String? 
  picture String?
  isNsfw Boolean @default(true)
  visibility Visiblity @default(PUBLIC)
  createdAt DateTime  @default(now())
  communityUsers    CommunityUser[]
  posts          Post[]
}

enum Role {
    ADMIN
    GUEST
}

model CommunityUser {
  community_user_id String       @id @default(uuid())
  role Role @default(GUEST)

  user       User      @relation(fields: [user_id], references: [id])
  user_id String 

  community        Community @relation(fields: [community_id], references: [community_id])
  community_id String

  joinedAt DateTime  @default(now())
}

model Post {
  post_id         String       @id @default(uuid())
  title           String  @unique
  content         String
  positivity      Float
  picture String?
  createdAt       DateTime  @default(now())

  author          User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id       String

  community       Community @relation(fields: [community_id], references: [community_id], onDelete: Cascade)
  community_id    String
  
  comments        Comment[] 
  votes           Vote[]
}


model Comment {
  comment_id      String       @id @default(uuid())
  content         String
  positivity      Float
  createdAt       DateTime     @default(now())

  author          User         @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id       String

  post            Post         @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  post_id         String

  parent_comment  Comment?     @relation("ReponseA", fields: [parent_comment_id], references: [comment_id], onDelete: Cascade)
  parent_comment_id String?

  votes           Vote[]
  
  child_comments  Comment[]    @relation("ReponseA")

}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
// Mod√®le pour les votes
model Vote {
  vote_id         String       @id @default(uuid())
  type            VoteType
  date_de_creation DateTime  @default(now())
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  post            Post?      @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  post_id String?

  comment Comment?  @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
  comment_id String?
}

